generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  password       String?
  phone          String?
  imageUrl       String?
  createdAt      DateTime      @default(now())
  lastPassUpdate DateTime?
  projects       Project[]     @relation("UserProjects")
  userServices   UserService[] @relation("UserServices")
  tasks          Task[]        @relation("UserTasks")
  Messages       Message[]
}

model Plan {
  id           String        @id @default(cuid())
  name         String
  category     String
  slug         String        @unique
  price        Float
  title        String?
  createdAt    DateTime      @default(now())
  features     Feature[]
  userServices UserService[]
}

model Project {
  id        String    @id @default(cuid())
  name      String
  userId    String
  source    String
  startDate DateTime
  endDate   DateTime?
  deadline  DateTime?
  progress  Int       @default(0)

  user   User            @relation("UserProjects", fields: [userId], references: [id])
  status ProjectStatus[]
  tasks  Task[]

  @@index([userId])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String
  status      TaskStatus @default(PENDING)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  userId        String
  user          User        @relation("UserTasks", fields: [userId], references: [id])
  projectId     String
  project       Project     @relation(fields: [projectId], references: [id])
  userServiceId String
  userService   UserService @relation(fields: [userServiceId], references: [id])
  messages      Message[]

  @@index([userId])
  @@index([projectId])
  @@index([userServiceId])
}

model Message {
  id        String   @id @default(cuid())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  content   String
  createdAt DateTime @default(now())

  @@index([taskId])
  @@index([senderId])
}

model Feature {
  id     String @id @default(cuid())
  label  String
  value  Int
  planId String
  plan   Plan   @relation(fields: [planId], references: [id])
}

model UserService {
  id        String    @id @default(cuid())
  user      User      @relation("UserServices", fields: [userId], references: [id])
  userId    String
  plan      Plan      @relation(fields: [planId], references: [id])
  planId    String
  createdAt DateTime  @default(now())
  endsAt    DateTime?
  taskLimit Int
  tasks     Task[]

  @@unique([userId, planId])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum ProjectStatus {
  PENDING
  STARTED
  WORKING
  TESTING
  DONE
}
